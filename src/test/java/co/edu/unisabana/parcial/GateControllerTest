package co.edu.unisabana.parcial;

import co.edu.unisabana.parcial.controller.dto.CheckpointDTO;
import co.edu.unisabana.parcial.controller.dto.ResponseGate;
import co.edu.unisabana.parcial.service.CheckpointService;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.slf4j.Logger;
import org.springframework.http.MediaType;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.setup.MockMvcBuilders;

import static org.mockito.Mockito.doThrow;
import static org.mockito.Mockito.verify;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.content;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;

class GateControllerTest {

    @Mock
    private CheckpointService checkpointService;

    @InjectMocks
    private GateController gateController;

    private MockMvc mockMvc;

    @BeforeEach
    void setUp() {
        MockitoAnnotations.openMocks(this);
        mockMvc = MockMvcBuilders.standaloneSetup(gateController).build();
    }

    @Test
    void testCheckin_Success() throws Exception {
        CheckpointDTO checkpointDTO = new CheckpointDTO();

        mockMvc.perform(post("/checkpoint/checkin")
                .contentType(MediaType.APPLICATION_JSON)
                .content("{\"someField\":\"someValue\"}"))  // Sustituye por el JSON adecuado según tu CheckpointDTO
                .andExpect(status().isOk())
                .andExpect(content().json("{\"success\":true}"));

        verify(checkpointService).checkin(checkpointDTO);
    }

    @Test
    void testCheckin_Failure() throws Exception {
        CheckpointDTO checkpointDTO = new CheckpointDTO();

        doThrow(new RuntimeException("Error")).when(checkpointService).checkin(checkpointDTO);

        mockMvc.perform(post("/checkpoint/checkin")
                .contentType(MediaType.APPLICATION_JSON)
                .content("{\"someField\":\"someValue\"}"))  // Sustituye por el JSON adecuado según tu CheckpointDTO
                .andExpect(status().isOk())
                .andExpect(content().json("{\"success\":false}"));

        verify(checkpointService).checkin(checkpointDTO);
    }

    @Test
    void testCheckout_Success() throws Exception {
        CheckpointDTO checkpointDTO = new CheckpointDTO();

        mockMvc.perform(post("/checkpoint/checkout")
                .contentType(MediaType.APPLICATION_JSON)
                .content("{\"someField\":\"someValue\"}"))  // Sustituye por el JSON adecuado según tu CheckpointDTO
                .andExpect(status().isOk())
                .andExpect(content().json("{\"success\":true}"));

        verify(checkpointService).checkout(checkpointDTO);
    }

    @Test
    void testCheckout_Failure() throws Exception {
        CheckpointDTO checkpointDTO = new CheckpointDTO();

        doThrow(new RuntimeException("Error")).when(checkpointService).checkout(checkpointDTO);

        mockMvc.perform(post("/checkpoint/checkout")
                .contentType(MediaType.APPLICATION_JSON)
                .content("{\"someField\":\"someValue\"}"))  // Sustituye por el JSON adecuado según tu CheckpointDTO
                .andExpect(status().isOk())
                .andExpect(content().json("{\"success\":false}"));

        verify(checkpointService).checkout(checkpointDTO);
    }
}
